#1.异常
- 广义上的错误分为错误很异常
- 错误指的是可以认为避免的
- 异常是指在语法逻辑正确的前提下出现的问题
    配置文件、路径改变、偶尔报错....
- Python中，异常是一个类，可以处理和使用
    BaseException	所有异常的基类
    SystemExit	解释器请求退出
    KeyboardInterrupt	用户中断执行(通常是输入^C)
    Exception	常规错误的基类
    StopIteration	迭代器没有更多的值
    GeneratorExit	生成器(generator)发生异常来通知退出
    StandardError	所有的内建标准异常的基类
    ArithmeticError	所有数值计算错误的基类
    FloatingPointError	浮点计算错误
    ZeroDivisionError	除(或取模)零 (所有数据类型)
    AssertionError	断言语句失败
    AttributeError	对象没有这个属性
    EOFError	没有内建输入,到达EOF 标记
    EnvironmentError	操作系统错误的基类
    IOError	输入/输出操作失败
    OSError	操作系统错误
    WindowsError	系统调用失败
    ImportError	导入模块/对象失败
    LookupError	无效数据查询的基类
    IndexError	序列中没有此索引(index)
    KeyError	映射中没有这个键
    MemoryError	内存溢出错误(对于Python 解释器不是致命的)
    NameError	未声明/初始化对象 (没有属性)
    UnboundLocalError	访问未初始化的本地变量
    ReferenceError	弱引用(Weak reference)试图访问已经垃圾回收了的对象
    RuntimeError	一般的运行时错误
    NotImplementedError	尚未实现的方法
    SyntaxError	Python 语法错误
    IndentationError	缩进错误
    TabError	Tab 和空格混用
    SystemError	一般的解释器系统错误
    TypeError	对类型无效的操作
    ValueError	传入无效的参数
    UnicodeError	Unicode 相关的错误
    UnicodeDecodeError	Unicode 解码时的错误
    UnicodeEncodeError	Unicode 编码时错误
    UnicodeTranslateError	Unicode 转换时错误
    Warning	警告的基类
    DeprecationWarning	关于被弃用的特征的警告
    FutureWarning	关于构造将来语义会有改变的警告
    OverflowWarning	旧的关于自动提升为长整型(long)的警告
    PendingDeprecationWarning	关于特性将会被废弃的警告
    RuntimeWarning	可疑的运行时行为(runtime behavior)的警告
    SyntaxWarning	可疑的语法的警告
    UserWarning	用户代码生成的警告

#2.异常处理
- 不能保证程序会被永远执行
- 但是，我们要保证程序在最坏的情况下得到问题可以得到妥善处理
- pyhton异常处理模块的语法为：
    用try,except,else,finally等语句来执行
    具体的参看廖雪峰的个人博客

- 流程：
        1.执行try下面的语句
        2.如果没有出现异常，则在except语句中查找对应异常进行处理
        3.如果么有出现异常，则执行else语句
        4.最后，不管是否出现异常，都要执行finally语句
     - 除except(最少一个)以外，else和finally是可选
