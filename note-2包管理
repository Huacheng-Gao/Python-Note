#1.模块
- 一个模块就是一个包含Python代码的文件，后缀名为.py就可以了，模块就是Python文件
- 为什么使用模块
    - 程序太大，编写维护很不方便，需要拆分
    - 模块化可以增加代码重复利用的方式
    - 当做命名空间使用，避免命名冲突
- 如何定义模块
    - 模块就是一个普通的文件，所以任何代码可以直接编写
    - 模块编写规范，最好在模块中具有以下内容：
            - 函数（功能单一）
            - 类：相似功能的组合，或者说时类似业务模块的组合。规则是：高内聚，低耦合，
            - 测试代码

- 如何使用模块
    - 模块直接导入,
        - 加入模块名称直接不允许以数字开头，比如说01开头的，会讲01识别成变量回事其他东西
            - 但是当一个模块已经是以数字开头时，我们可以借用importlib实现
                import importlib

                #相当于将‘01’赋值给模块‘xuexi’
                xuexi = importlib.import_module('01')
                #然后在调用这个‘学习’的模块就可以了

                stu = xuexi.Student()

    - 语法
           import module_name
           module_name.function_name
           module_name.class.name
         案例：p01,p02
    - import 模块名 as 别名
            - 导入的同时给模块起个别名
            - 其余用法和第一种相同

            案例:p03

    - from module_name import func_name,class_name
        - 按上述方法有选着性的导入
        - 使用的时候可以直接使用导入的内容，不需要前缀
        案例：p04

    - from module_name import *
      #*代表这个这个模块的所有内容，
        - 导入模块的所有内容
        案例p05

- if __name__ =='__main__':
    - 上面这句话意思是：当我这个程序本身执行时，会打印下面的print，但是当别的模块调用p01时，却不会
 打印下面的print,这个判断语句建议放在程序的开始，作为程序的入口执行。
    - 具体参见P01中的解释。

#2.模块的搜索路径和存储
- 搜索路径：加载模块的时候，系统会在那些文件夹中搜索此模块
- 系统默认模块搜索路径
            import sys
            sys.path 属性可以获取路径列表
         案例p06

- 添加搜索路径：就是给list添加元素
        sys.path.append(dir)
- 模块加载顺序
    - 在内存中已经加载好的模块
    - 搜索Python的内置模块
    - 搜索sys.path的路径


#3.包
- 包时一种组织管理代码的方式，包里存放的是模块
- 包：时用于讲模块包含在一起的文件夹就是包
- 自定义包结构：
        /---包
        /---/--- __init__.py  包的标志性文件
        /---/--- 模块一
        /---/--- 模块2
        /---/--- 子包（子文件夹）
        /---/---/--- __init__.py 包的标志性文件
        /---/---/--- 模块1
        ...

